/* Iridis Programming Language - C Interop Example */

/* Consider we have the following library files and we want to incorporate Iridis
   into a large project.

SomeLibrary.h:
--------------
     #pragma once

     #include <stdio.h>
     #include <stdint.h>
    
     typedef struct Person_t
     {
         char* name;
         uint32_t age;
     } Person;
    
     void PrintPersonData(Person person);

SomeLibrary.c:
-----------------

     #include "SomeLibrary.h"

     void SomeObscureFunction()
     {
         puts("I am some weird function with no declaration");
         puts("Surely Iridis wont be able to find me");
     }

     void PrintPersonData(Person person)
     {
         printf("Name: %s\n", person.name);
         printf("Age: %d\n", person.age);
     }

   In Iridis, to use the functions defined in the C headers, you can include the header file 
   using the 'include!' directive. It automatically translates char* to 'cstring' for compatibility. */

// Include the C header file 'SomeLibrary.h' to access the C functions and types.
SomeLibrary :: include!("SomeLibrary.h")

// For the missing `SomeObscureFunction`, we can just use an extern procedure
// We place it in the SomeLibrary module so we can find it with the other functions

mod SomeLibrary
{
    SomeObscureFunction :: extern proc (Person)
}

main :: proc()
{
    // Create a 'Person' instance using the 'Person' type defined in 'SomeLibrary.h'.
    hachem := SomeLibrary.Person
    {
        name: "Hachem", // This would be a cstring not a string
        age: 17         // This would be a u32
    }

    // Call the C function 'PrintPersonData' to print the 'Person' data.
    SomeLibrary.PrintPersonData(hachem)
    SomeLibrary.SomeObscureFunction()
}

// Now you can use Iridis to work with the SomeLibrary functions and types in your large project.
// This allows seamless integration between Iridis and the existing C codebase.
